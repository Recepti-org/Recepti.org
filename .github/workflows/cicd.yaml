name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test_database_connection:
    runs-on: ubuntu-latest
    steps:
      - name: Install MySQL Server and Client
        run: |
            sudo apt-get update
            sudo apt-get install -y mysql-server mysql-client
            sudo service mysql start

      - name: Create Recepti Database if not exists
        run: |
            mysql -h localhost -u root -proot -e "CREATE DATABASE IF NOT EXISTS recepti;"

      - name: Test Database Connection
        run: |
          mysql -h localhost -u root -proot -e "SHOW DATABASES;"
        env:
          DB_HOST: localhost
          DB_USER: root
          DB_PASSWORD: root

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test_database_connection
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: recepti
          MYSQL_USER: root
          MYSQL_PASSWORD: root
        options: --health-cmd='mysqladmin ping --silent' --health-timeout=30s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: "19"

      - name: Install dockerize
        run: |
          curl -sSL https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz | tar xz -C /usr/local/bin

      - name: Wait for MySQL to be ready
        run: |
          dockerize -wait tcp://mysql:3306 -timeout 1m

      - name: Get MySQL IP Address
        id: mysql_ip
        run: |
          echo "::set-output name=MYSQL_IP::$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -q -f name=mysql))"

      - name: Build backend
        run: |
          mvn -B package --file pom.xml
        working-directory: back-end/Recepti.org/Recepti.org
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://${{ steps.mysql_ip.outputs.MYSQL_IP }}:3306/Recepti

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.11.1"

      - name: Install and build frontend
        run: |
          npm ci
        working-directory: front-end

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: build-frontend
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: recepti
          MYSQL_USER: root
          MYSQL_PASSWORD: root
        options: --health-cmd='mysqladmin ping --silent' --health-timeout=30s --health-retries=5
      # Custom backend service image, ensure it's available in your registry
      my-backend-service:
        image: my-backend-image:latest
        options: --health-cmd='curl --silent --fail http://localhost:8080/health' --health-timeout=30s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: "19"

      - name: Install dockerize
        run: |
          curl -sSL https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz | tar xz -C /usr/local/bin

      - name: Wait for MySQL to be ready
        run: |
          dockerize -wait tcp://mysql:3306 -timeout 1m

      - name: Create Additional Database
        run: |
          mysql -h mysql -P 3306 -uroot -proot -e "CREATE DATABASE recepti;"

      - name: Run tests
        run: |
          ./mvnw test
        working-directory: back-end/Recepti.org
