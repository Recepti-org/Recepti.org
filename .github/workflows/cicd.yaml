name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: Recepti
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-timeout=30s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "19"

      - name: Install dockerize
        run: |
          curl -sSL https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz | tar xz -C /usr/local/bin

      #- name: Wait for MySQL to be ready
        #run: |
          #dockerize -wait tcp://mysql:3306 -timeout 1m

      - name: Build backend
        run: |
          mvn -B package --file pom.xml
        working-directory: back-end/Recepti.org/Recepti.org
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/Recepti

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create package.json
        run: |
            mkdir -p front-end
            echo '{
            "name": "frontend-app",
            "version": "1.0.0",
            "scripts": {
             "start": "react-scripts start",
             "build": "react-scripts build",
             "test": "react-scripts test --env=jsdom",
             "eject": "react-scripts eject"
            },
            "dependencies": {
             "react": "^17.0.2",
             "react-dom": "^17.0.2",
             "react-scripts": "^4.0.3",
             "type-fest": "^0.21.3"
            }
            }' > front-end/package.json

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.11.1"

      - name: Clear existing lock files
        run: rm -f front-end/package-lock.json

      - name: Install dependencies
        run: npm install
        working-directory: front-end

      - name: Synchronize lock file
        run: npm install --package-lock-only
        working-directory: front-end

      - name: Install dependencies with npm ci
        run: npm ci
        working-directory: front-end

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: build-frontend
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: recepti
          MYSQL_USER: root
          MYSQL_PASSWORD: root
        options: --health-cmd='mysqladmin ping --silent' --health-timeout=30s --health-retries=5
      # Custom backend service image, ensure it's available in your registry
      my-backend-service:
        image: my-backend-image:latest
        options: --health-cmd='curl --silent --fail http://localhost:8080/health' --health-timeout=30s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: "19"

      - name: Install dockerize
        run: |
          curl -sSL https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz | tar xz -C /usr/local/bin

      - name: Wait for MySQL to be ready
        run: |
          dockerize -wait tcp://mysql:3306 -timeout 1m

      - name: Create Additional Database
        run: |
          mysql -h mysql -P 3306 -uroot -proot -e "CREATE DATABASE recepti;"

      - name: Run tests
        run: |
          ./mvnw test
        working-directory: back-end/Recepti.org

